import asyncio
import importlib
from datetime import datetime

import hydrogram
from dateutil.relativedelta import relativedelta
from pyrogram.helpers import ikb, kb
from pyrogram.types import (KeyboardButton, ReplyKeyboardMarkup,
                            ReplyKeyboardRemove)
from pytz import timezone

from config import API_HASH, API_ID, LOG_SELLER, MAX_BOT
from Haji import AKSES_DEPLOY, BOT_ID, UserBot, bot, dB, haji
from Haji.helpers import CMD, ButtonUtils, Message, no_trigger
from Haji.logger import logger
from plugins import PLUGINS


async def setExpiredUser(user_id):
    seles = await dB.get_list_from_var(BOT_ID, "SELLER")
    if user_id in seles:
        now = datetime.now(timezone("Asia/Jakarta"))
        expired = now + relativedelta(months=12)
        await dB.set_expired_date(user_id, expired)
    else:
        now = datetime.now(timezone("Asia/Jakarta"))
        expired = now + relativedelta(months=1)
        await dB.set_expired_date(user_id, expired)


async def mari_buat_userbot(client, message):
    user_id = message.from_user.id
    if user_id in haji._get_my_id:
        return await client.send_message(
            user_id,
            "<b><blockquote>·¥Ä…¥·¥Ö·¥Ä ·¥õ·¥á ü·¥Ä ú ·¥ç·¥á·¥ç·¥ÄÍú±·¥Ä…¥…¢ ·¥úÍú±·¥á Ä ô·¥è·¥õ</blockquote></b>",
            reply_markup=ReplyKeyboardRemove(),
        )
    if len(haji._ubot) == MAX_BOT:
        buttons = kb(
            [["üí¨ Hubungi Admins"]], resize_keyboard=True, one_time_keyboard=True
        )
        return await message.reply(
            f"""
<b>‚ùå ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö·¥Ä·¥ò·¥Ä·¥õ ·¥ç·¥á·¥ç ô·¥ú·¥Ä·¥õ ·¥úÍú±·¥á Ä ô·¥è·¥õ !</b>

<b>üìö ·¥ã·¥Ä Ä·¥á…¥·¥Ä ·¥õ·¥á ü·¥Ä ú ·¥ç·¥á…¥·¥Ñ·¥Ä·¥ò·¥Ä…™  è·¥Ä…¥…¢ ·¥õ·¥á ü·¥Ä ú ·¥Ö…™ ·¥õ·¥á…¥·¥õ·¥ú·¥ã·¥Ä…¥ : {len(haji._ubot)}</b>

<b>üëÆ‚Äç‚ôÇ Íú±…™ ü·¥Ä·¥ã·¥Ä…¥  ú·¥ú ô·¥ú…¥…¢…™ ·¥Ä·¥Ö·¥ç…™…¥ . </b>
""",
            reply_markup=buttons,
        )
    if user_id not in AKSES_DEPLOY:
        buttons = ikb([[("üìÉ Saya Setuju", "go_payment")], [("‚ùå Tutup", "closed")]])
        text = f"<blockquote>{await Message.policy_message()}</blockquote>"
        return await message.reply(
            text,
            disable_web_page_preview=True,
            reply_markup=buttons,
        )
    else:
        return await create_userbots(client, message)


async def create_userbots(client, message):
    try:
        user_id = message.from_user.id
        anu = ReplyKeyboardMarkup(
            [
                [KeyboardButton(text="Kontak Saya", request_contact=True)],
            ],
            resize_keyboard=True,
            one_time_keyboard=True,
        )
        anu = ReplyKeyboardMarkup(
            [
                [KeyboardButton(text="Kontak Saya", request_contact=True)],
            ],
            resize_keyboard=True,
            one_time_keyboard=True,
        )
        try:
            phone = await client.ask(
                user_id,
                f"<blockquote><b>Íú±…™ ü·¥Ä·¥ã·¥Ä…¥ ·¥ã ü…™·¥ã ·¥õ·¥è·¥ç ô·¥è ü <u>Kontak Saya</u> ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥…¢…™ Ä…™·¥ç·¥ã·¥Ä…¥ …¥·¥è·¥ç·¥è Ä ·¥õ·¥á ü·¥á·¥ò·¥è…¥ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥Ä…¥·¥Ö·¥Ä.</b></blockquote>\n<b>·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö  ô è {await Message._ads()}</b>",
                reply_markup=anu,
            )
            phone_number = phone.contact.phone_number
        except AttributeError:
            try:
                phone = await client.ask(
                    user_id,
                    f"<blockquote><b>Íú±…™ ü·¥Ä·¥ã·¥Ä…¥ ·¥ã ü…™·¥ã ·¥õ·¥è·¥ç ô·¥è ü <u>Kontak Saya</u> ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥…¢…™ Ä…™·¥ç·¥ã·¥Ä…¥ …¥·¥è·¥ç·¥è Ä ·¥õ·¥á ü·¥á·¥ò·¥è…¥ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥Ä…¥·¥Ö·¥Ä.</b></blockquote>\n<b>·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö  ô è {await Message._ads()}</b>",
                    reply_markup=anu,
                )
                phone_number = phone.contact.phone_number
            except Exception:
                return await bot.send_message(
                    user_id,
                    "<blockquote><b>·¥ò·¥á·¥Ä, ·¥ò·¥ú…¥ è·¥Ä ·¥ç·¥Ä·¥õ·¥Ä ·¥Ö…™·¥ò·¥Ä·¥ã·¥á  ô·¥ú·¥Ä·¥õ  ô·¥Ä·¥Ñ·¥Ä!! ·¥ä·¥Ä…¥…¢·¥Ä…¥  ô·¥è·¥ã·¥á·¥ò ·¥ç·¥ú ü·¥ú.</b></blockquote>",
                    reply_markup=ButtonUtils.start_menu(is_admin=False),
                )
        new_client = hydrogram.Client(
            name=str(user_id),
            api_id=API_ID,
            api_hash=API_HASH,
            in_memory=True,
        )
        await asyncio.sleep(2)
        get_otp = await client.send_message(
            user_id,
            f"<b><blockquote>Íú±·¥á·¥Ö·¥Ä…¥…¢ ·¥ç·¥á…¥…¢…™ Ä…™·¥ç ·¥ã·¥è·¥Ö·¥á ·¥è·¥õ·¥ò...</blockquote></b>\n<b>·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö  ô è {await Message._ads()}</b>",
            reply_markup=ReplyKeyboardRemove(),
        )
        await new_client.connect()
        try:
            code = await new_client.send_code(phone_number.strip())
        except hydrogram.errors.exceptions.bad_request_400.ApiIdInvalid as AID:
            await get_otp.delete()
            return await client.send_message(user_id, AID)
        except hydrogram.errors.exceptions.bad_request_400.PhoneNumberInvalid as PNI:
            await get_otp.delete()
            return await client.send_message(user_id, PNI)
        except hydrogram.errors.exceptions.bad_request_400.PhoneNumberFlood as PNF:
            await get_otp.delete()
            return await client.send_message(user_id, PNF)
        except hydrogram.errors.exceptions.bad_request_400.PhoneNumberBanned as PNB:
            await get_otp.delete()
            return await client.send_message(user_id, PNB)
        except hydrogram.errors.exceptions.bad_request_400.PhoneNumberUnoccupied as PNU:
            await get_otp.delete()
            return await client.send_message(user_id, PNU)
        except Exception as error:
            await get_otp.delete()
            return await client.send_message(
                user_id,
                f"<b>ERROR:</b> {error}",
                reply_markup=ButtonUtils.start_menu(is_admin=False),
            )
        await get_otp.delete()
        otp = await client.ask(
            user_id,
            f"<b><blockquote>Íú±…™ ü·¥Ä·¥ã·¥Ä…¥ ·¥ò·¥á Ä…™·¥ãÍú±·¥Ä ·¥ã·¥è·¥Ö·¥á ·¥è·¥õ·¥ò ·¥Ö·¥Ä Ä…™ <a href=tg://openmessage?user_id=777000>·¥Ä·¥ã·¥ú…¥ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç</a>  Ä·¥áÍú±·¥ç…™. ·¥ã…™ Ä…™·¥ç ·¥ã·¥è·¥Ö·¥á ·¥è·¥õ·¥ò ·¥ã·¥á Íú±…™…¥…™ Íú±·¥á·¥õ·¥á ü·¥Ä ú ·¥ç·¥á·¥ç ô·¥Ä·¥Ñ·¥Ä Íú∞·¥è Ä·¥ç·¥Ä·¥õ ·¥Ö…™  ô·¥Ä·¥°·¥Ä ú …™…¥…™.</b>\n\n·¥ä…™·¥ã·¥Ä ·¥ã·¥è·¥Ö·¥á ·¥è·¥õ·¥ò ·¥Ä·¥Ö·¥Ä ü·¥Ä ú <code>12345</code> ·¥õ·¥è ü·¥è…¥…¢ <b>[ TAMBAHKAN SPASI ]</b> ·¥ã…™ Ä…™·¥ç·¥ã·¥Ä…¥ Íú±·¥á·¥ò·¥á Ä·¥õ…™ …™…¥…™ <code>1 2 3 4 5</code>.</blockquote></b>\n<b>·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö  ô è {await Message._ads()}</b>",
        )
        if otp.text in no_trigger:
            return await client.send_message(
                user_id,
                f"<blockquote><b>·¥ò Ä·¥èÍú±·¥áÍú± ·¥Ö…™  ô·¥Ä·¥õ·¥Ä ü·¥ã·¥Ä…¥.</b></blockquote>\n<b>·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö  ô è {await Message._ads()}</b>",
                reply_markup=ButtonUtils.start_menu(is_admin=False),
            )
        otp_code = otp.text
        try:
            await new_client.sign_in(
                phone_number.strip(),
                code.phone_code_hash,
                phone_code=" ".join(str(otp_code)),
            )
        except hydrogram.errors.exceptions.bad_request_400.PhoneCodeInvalid as PCI:
            return await client.send_message(user_id, PCI)
        except hydrogram.errors.exceptions.bad_request_400.PhoneCodeExpired as PCE:
            return await client.send_message(user_id, PCE)
        except hydrogram.errors.exceptions.bad_request_400.BadRequest as error:
            return await client.send_message(
                user_id,
                f"<b>ERROR:</b> {error}",
                reply_markup=ButtonUtils.start_menu(is_admin=False),
            )
        except hydrogram.errors.exceptions.unauthorized_401.SessionPasswordNeeded:
            two_step_code = await client.ask(
                user_id,
                f"<b><blockquote>·¥Ä·¥ã·¥ú…¥ ·¥Ä…¥·¥Ö·¥Ä ·¥õ·¥á ü·¥Ä ú ·¥ç·¥á…¥…¢·¥Ä·¥ã·¥õ…™Íú∞·¥ã·¥Ä…¥ ·¥†·¥á Ä…™Íú∞…™·¥ã·¥ÄÍú±…™ ·¥Ö·¥ú·¥Ä  ü·¥Ä…¥…¢·¥ã·¥Ä ú. Íú±…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ã…™ Ä…™·¥ç·¥ã·¥Ä…¥ ·¥ò·¥ÄÍú±Íú±·¥°·¥è Ä·¥Ö…¥ è·¥Ä.</blockquote></b>\n<b>·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö  ô è {await Message._ads()}</b>",
            )
            if two_step_code.text in no_trigger:
                return await client.send_message(
                    user_id,
                    f"<blockquote><b>·¥ò Ä·¥èÍú±·¥áÍú± ·¥Ö…™  ô·¥Ä·¥õ·¥Ä ü·¥ã·¥Ä…¥.</b></blockquote>\n<b>·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö  ô è {await Message._ads()}</b>",
                    reply_markup=ButtonUtils.start_menu(is_admin=False),
                )
            new_code = two_step_code.text
            try:
                await new_client.check_password(new_code)
                await dB.set_var(user_id, "PASSWORD", new_code)
            except Exception as error:
                return await client.send_message(
                    user_id,
                    f"<b>ERROR:</b> {error}",
                    reply_markup=ButtonUtils.start_menu(is_admin=False),
                )
        session_string = await new_client.export_session_string()
        await new_client.disconnect()
        new_client.storage.session_string = session_string
        new_client.in_memory = False
        bot_msg = await client.send_message(
            user_id,
            f"<b><blockquote>·¥õ·¥ú…¥…¢…¢·¥ú ·¥ò Ä·¥èÍú±·¥áÍú± Íú±·¥á ü·¥Ä·¥ç·¥Ä ùü∑-ùüª ·¥ç·¥á…¥…™·¥õ...\n·¥ã·¥Ä·¥ç…™ Íú±·¥á·¥Ö·¥Ä…¥…¢ ·¥ç·¥á…¥…¢ ú…™·¥Ö·¥ú·¥ò·¥ã·¥Ä…¥ ·¥úÍú±·¥á Ä ô·¥è·¥õ ·¥Ä…¥·¥Ö·¥Ä.</blockquote></b>\n<b>·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö  ô è {await Message._ads()}</b>",
            disable_web_page_preview=True,
        )
        await asyncio.sleep(2)
        kn_client = UserBot(
            name=str(user_id),
            api_id=API_ID,
            api_hash=API_HASH,
            session_string=session_string,
            in_memory=True,
        )
        try:
            await kn_client.start()
        except Exception as e:
            logger.error(f"Error Client: {str(e)}")
        if not await dB.get_expired_date(kn_client.me.id):
            await setExpiredUser(kn_client.me.id)
        await dB.add_ubot(
            user_id=int(kn_client.me.id),
            api_id=API_ID,
            api_hash=API_HASH,
            session_string=session_string,
        )
        if not user_id == kn_client.me.id:
            haji._ubot.remove(kn_client)
            await dB.remove_ubot(kn_client.me.id)
            await kn_client.log_out()
            return await bot_msg.edit(
                f"<blockquote><b>…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ ·¥Ä·¥ã·¥ú…¥ ·¥Ä…¥·¥Ö·¥Ä Íú±·¥á…¥·¥Ö…™ Ä…™,  ô·¥ú·¥ã·¥Ä…¥ ·¥è Ä·¥Ä…¥…¢  ü·¥Ä…™…¥!!</b></blockquote>\n<b>·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö  ô è {await Message._ads()}</b>"
            )
        await asyncio.sleep(1)
        for mod in PLUGINS:
            importlib.reload(importlib.import_module(f"plugins.{mod}"))
        seles = await dB.get_list_from_var(BOT_ID, "SELLER")
        if kn_client.me.id not in seles:
            try:
                AKSES_DEPLOY.remove(kn_client.me.id)
            except Exception:
                pass
        try:
            await kn_client.join_chat("noerafuck")
        except Exception:
            pass
        prefix = haji.get_prefix(kn_client.me.id)
        keyb = ButtonUtils.start_menu(is_admin=False)
        exp = await dB.get_expired_date(kn_client.me.id)
        expir = exp.astimezone(timezone("Asia/Jakarta")).strftime("%Y-%m-%d %H:%M")
        text_done = f"""
    <blockquote><b>üî• {bot.me.mention}  ô·¥á Ä ú·¥ÄÍú±…™ ü ·¥Ö…™ ·¥Ä·¥ã·¥õ…™Íú∞·¥ã·¥Ä…¥
    ‚û°Ô∏è ·¥Ä·¥ã·¥ú…¥ : <a href=tg://openmessage?user_id={kn_client.me.id}>{kn_client.me.first_name} {kn_client.me.last_name or ''}</a>
    ‚û°Ô∏è …™·¥Ö : <code>{kn_client.me.id}</code>
    ‚û°Ô∏è ·¥ò Ä·¥áÍú∞…™x·¥áÍú± : {' '.join(prefix)}
    ‚û°Ô∏è ·¥ç·¥ÄÍú±·¥Ä ·¥Ä·¥ã·¥õ…™Íú∞ : {expir}</b></blockquote>
    <b>·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö  ô è {await Message._ads()}</b>"""
        await bot_msg.edit(text_done, disable_web_page_preview=True, reply_markup=keyb)
        return await client.send_message(
            LOG_SELLER,
            f"""
    <b>‚ùè …¥·¥è·¥õ…™Íú∞…™·¥ã·¥ÄÍú±…™ ·¥úÍú±·¥á Ä ô·¥è·¥õ ·¥Ä·¥ã·¥õ…™Íú∞</b>
    <b>‚îú ·¥Ä·¥ã·¥ú…¥ :</b> <a href=tg://user?id={kn_client.me.id}>{kn_client.me.first_name} {kn_client.me.last_name or ''}</a> 
    <b>‚ï∞ …™·¥Ö  :</b> <code>{kn_client.me.id}</code>
    """,
            reply_markup=ikb(
                [
                    [
                        (
                            "Cek Kadaluarsa",
                            f"cek_masa_aktif {kn_client.me.id}",
                            "callback_data",
                        )
                    ]
                ]
            ),
            disable_web_page_preview=True,
        )
    except Exception as er:
        logger.error(f"{str(er)}")


@CMD.CALLBACK("^cek_masa_aktif")
async def _(client, cq):
    user_id = int(cq.data.split()[1])
    try:
        expired = await dB.get_expired_date(user_id)
        habis = expired.astimezone(timezone("Asia/Jakarta")).strftime("%Y-%m-%d %H:%M")
        return await cq.answer(f"‚è≥ ·¥°·¥Ä·¥ã·¥õ·¥ú : {habis}", True)
    except Exception:
        return await cq.answer("‚úÖ Íú±·¥ú·¥Ö·¥Ä ú ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ä·¥ã·¥õ…™Íú∞", True)


@CMD.CALLBACK("^closed")
async def _(client, cq):
    await cq.answer()
    return await cq.message.delete()
